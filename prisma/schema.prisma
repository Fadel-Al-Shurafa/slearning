// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String         @unique
  email         String         @unique
  emailVerified DateTime?
  image         String         @unique
  role          Role           @default(BASIC)
  accounts      Account[]
  sessions      Session[]
  QuestionPosts QuestionPost[]

  @@unique([name, image, email, id])
  @@index([email])
}

enum Role {
  BASIC
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model QuestionPost {
  id        String     @id @default(cuid())
  title     String
  name      String
  email     String
  image     String
  userId    String
  Chats     ChatText[]
  content   String?
  published Boolean    @default(false)
  createdAT DateTime   @default(now())
  updatedAT DateTime?  @updatedAt

  user User @relation(fields: [name, image, email, userId], references: [name, image, email, id], onDelete: Cascade)

  @@unique([email, id])
}

model ChatText {
  id             String        @id @default(cuid())
  email          String
  image          String
  chat           String
  isDeleted      Boolean       @default(false)
  QuestionPostID String?
  QuestionPost   QuestionPost? @relation(fields: [QuestionPostID], references: [id], onDelete: Cascade)

  @@unique([id])
}

model Image {
  id       String @id @default(cuid())
  publicId String @unique
  format   String
  version  String
}
