// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  posts            Post[]
  role             Role            @default(BASIC)
  accounts      Account[]
  sessions      Session[]
  QuestionPosts    QuestionPost[]          
  // VideoPosts       Post[]          @relation("VideoPosts")
  // ResearchPosts    Post[]          @relation("ResearchPosts")
  // favoritePosts    Post[]          @relation("favoritePosts")

  @@unique([email, name])
  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Post {
  id                String           @id @default(cuid())
  title             String
  content           String?
  published         Boolean       @default(false)
  author            User?         @relation(fields: [authorId], references: [id])
  authorId          String?
  createdAT         DateTime      @default(now())
  updatedAT         DateTime?     @updatedAt
  // VideoPostsBy      User       @relation("VideoPosts", fields: [VideoPostsByid], references: [id])
  // VideoPostsByid    String
  // ResearchPostsBy   User       @relation("ResearchPosts", fields: [ResearchPostsByid], references: [id])
  // ResearchPostsByid String
  // favoritedBy       User?      @relation("favoritePosts", fields: [favoritedByid], references: [id])
  // favoritedByid     String?
}
model QuestionPost {
  id                String           @id @default(cuid())
  title             String
  Images            Image[]
  Chats             ChatText[]
  content           String?
  published         Boolean     @default(false)
  author            User?       @relation(fields: [authorId], references: [id])
  authorId          String?
  createdAT         DateTime    @default(now())
  updatedAT         DateTime?   @updatedAt
  // VideoPostsBy      User       @relation("VideoPosts", fields: [VideoPostsByid], references: [id])
  // VideoPostsByid    String
  // ResearchPostsBy   User       @relation("ResearchPosts", fields: [ResearchPostsByid], references: [id])
  // ResearchPostsByid String
  // favoritedBy       User?      @relation("favoritePosts", fields: [favoritedByid], references: [id])
  // favoritedByid     String?
}
model Image {
  id        String       @id @default(cuid())
  title     String
  image     Bytes
  QuestionPost      QuestionPost?       @relation(fields: [QuestionPostID], references: [id])
  QuestionPostID    String?
}

model ChatText {
  id        String       @id @default(cuid())
  chat      String
  QuestionPost      QuestionPost?       @relation(fields: [QuestionPostID], references: [id])
  QuestionPostID    String?
}

enum Role {
  BASIC
  ADMIN
}
